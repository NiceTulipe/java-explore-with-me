{
	"info": {
		"_postman_id": "6b4937f0-edcc-4351-9565-bec74e5cf7dc",
		"name": "Ruslan Future Comment",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "25805219"
	},
	"item": [
		{
			"name": "Comments",
			"item": [
				{
					"name": "Добавление коммента",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"The id should be a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.be.a('number');",
									"    pm.expect(responseData.id).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"authorName is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.authorName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"authorName should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Text is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.text).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Has comment create response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"",
									"pm.test(\"Test comment 'Text' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('text');",
									"    pm.expect(jsonData.text, '\"text\" Чармондер мой первый покемон\"').to.eql('Чармондер мой первый покемон');",
									"});",
									"",
									"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {",
									"    const target = pm.response.json();",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('authorName');",
									"pm.expect(target).to.have.property('text');",
									"pm.expect(target).to.have.property('created');",
									"});",
									"",
									"",
									"",
									"var jsonData = pm.response.json();",
									"    pm.collectionVariables.set(\"comId\", jsonData.id);",
									"    pm.collectionVariables.set(\"comIdTestPatch\", jsonData.id);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"        pm.collectionVariables.set(\"eventId\", event.id);\r",
									"        pm.collectionVariables.set(\"eventIdAnother\", event.id);\r",
									"        pm.collectionVariables.set(\"userId\", user.id);\r",
									"        pm.collectionVariables.set(\"userName\", user.name);\r",
									"        pm.collectionVariables.set('response', event);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"Чармондер мой первый покемон\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}"
								},
								{
									"key": "eventId",
									"value": "{{eventId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление коммента от другого пользователя",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"The id should be a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.be.a('number');",
									"    pm.expect(responseData.id).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"authorName is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.authorName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"authorName should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Text is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.text).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Has comment create response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test comment 'Text' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('text');",
									"    pm.expect(jsonData.text, '\"text\" \"А у меня был Чикарито\"').to.eql('А у меня был Чикарито');",
									"});",
									"",
									"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {",
									"    const target = pm.response.json();",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('authorName');",
									"pm.expect(target).to.have.property('text');",
									"pm.expect(target).to.have.property('created');",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"    pm.collectionVariables.set(\"comId\", jsonData.id);",
									"    pm.collectionVariables.set(\"comIdAnother\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"userIdAnother\", user.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"А у меня был Чикарито\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userIdAnother}}"
								},
								{
									"key": "eventId",
									"value": "{{eventId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Ошибка добавления коммента от несуществующего пользователя",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required field - error\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.error).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Error message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.error).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"А какой у тебя был покемон?\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments"
							],
							"variable": [
								{
									"key": "userId",
									"value": "9999999"
								},
								{
									"key": "eventId",
									"value": "{{eventId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Ошибка добавления коммента к несуществующему событию",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required field - error\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.error).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Error message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.error).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"Какой может быть цена ошибки?\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}"
								},
								{
									"key": "eventId",
									"value": "999999999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментария по его id Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и тело ответа в формате JSON\", function(){\r",
									"pm.response.to.have.status(200);\r",
									"pm.response.to.be.withBody;\r",
									"pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, authorName, text, created\", function(){\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('authorName');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target.text, '\"text\" должен быть равен \"А у меня был Чикарито\"').to.eql('А у меня был Чикарито')\r",
									"pm.expect(target).to.have.property('created');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "{{comIdAnother}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить список комментариев по id события Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и тело ответа в формате JSON\", function(){\r",
									"pm.response.to.have.status(200);\r",
									"pm.response.to.be.withBody;\r",
									"pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const body = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать список с двумя элементами.\", function(){\r",
									"pm.expect(body).is.an('array');\r",
									"pm.expect(body.length, 'List должен содержать 2 элемента').to.eql(2);\r",
									"});\r",
									"\r",
									"const target = pm.response.json()[0];\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, authorName, text, created\", function(){\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('authorName');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target.text, '\"text\" должен быть равен \"Чармондер мой первый покемон\"').to.eql('Чармондер мой первый покемон')\r",
									"pm.expect(target).to.have.property('created');\r",
									"});\r",
									"\r",
									"const target2 = pm.response.json()[1];\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, authorName, text, created\", function(){\r",
									"pm.expect(target2).to.have.property('id');\r",
									"pm.expect(target2).to.have.property('authorName');\r",
									"pm.expect(target2).to.have.property('text');\r",
									"pm.expect(target2.text, '\"text\" должен быть равен \"А у меня был Чикарито\"').to.eql('А у меня был Чикарито')\r",
									"pm.expect(target2).to.have.property('created');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comments/event/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"event",
								":eventId"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "{{eventIdAnother}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить список комментариев используя фильтр. Фильтр id пользователя Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и тело ответа в формате JSON\", function(){\r",
									"pm.response.to.have.status(200);\r",
									"pm.response.to.be.withBody;\r",
									"pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const body = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать список.\", function(){\r",
									"pm.expect(body).is.an('array');\r",
									"});\r",
									"\r",
									"const target = pm.response.json()[0];\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, authorName, text, created\", function(){\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('authorName');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target.text, '\"text\" должен быть равен \"А у меня был Чикарито\"').to.eql('А у меня был Чикарито')\r",
									"pm.expect(target).to.have.property('created');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comments?idUser={{userIdAnother}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments"
							],
							"query": [
								{
									"key": "idUser",
									"value": "{{userIdAnother}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить список комментариев используя фильтр. Фильтр по тексту комментариев Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и тело ответа в формате JSON\", function(){\r",
									"pm.response.to.have.status(200);\r",
									"pm.response.to.be.withBody;\r",
									"pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comments?text=поК",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments"
							],
							"query": [
								{
									"key": "text",
									"value": "поК"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить список комментариев используя несколько фильтров, по тексту и по id пользователя Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и тело ответа в формате JSON\", function(){\r",
									"pm.response.to.have.status(200);\r",
									"pm.response.to.be.withBody;\r",
									"pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const body = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать список.\", function(){\r",
									"pm.expect(body).is.an('array');\r",
									"});\r",
									"\r",
									"const target = pm.response.json()[0];\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, authorName, text, created\", function(){\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('authorName');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target.text, '\"text\" должен быть равен \"А у меня был Чикарито\"').to.eql('А у меня был Чикарито')\r",
									"pm.expect(target).to.have.property('created');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comments?text=Чи&idUser={{userIdAnother}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments"
							],
							"query": [
								{
									"key": "text",
									"value": "Чи"
								},
								{
									"key": "idUser",
									"value": "{{userIdAnother}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение коммента",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate that the id field is a non-zero integer\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.id).to.be.above(0, \"Value should be a non-zero integer\");",
									"});",
									"",
									"",
									"pm.test(\"Validate the text field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.text).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"update comment\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.text).to.exist;",
									"    pm.expect(responseData.text).to.be.an('string');",
									"    ",
									"});",
									"pm.test(\"Test comment 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('text');",
									"    pm.expect(jsonData.text, '\"text\" must be \"абракадабра\"').to.eql('абракадабра');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"абракадабра\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userIdAnother}}"
								},
								{
									"key": "eventId",
									"value": "{{eventId}}"
								},
								{
									"key": "commentId",
									"value": "{{comIdAnother}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Ошибка изменение коммента другим пользователем",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code should be 409\", function () {",
									"    pm.expect(pm.response.code).to.equal(409);",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'error' field is present in the response\", function () {",
									"    pm.expect(pm.response.json().error).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"The error field should be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"абракадабра\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userIdAnother}}"
								},
								{
									"key": "eventId",
									"value": "{{eventId}}"
								},
								{
									"key": "commentId",
									"value": "{{comIdTestPatch}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Ошибка изменение коммента нет такого  события",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"pm.test(\"Response has an error message\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.error).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Error message is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.error).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Error message is a string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.error).to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Error message is descriptive and informative\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.error).to.exist.and.to.be.a('string').and.to.not.be.empty;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"абракадабра\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userIdAnother}}"
								},
								{
									"key": "eventId",
									"value": "999999999"
								},
								{
									"key": "commentId",
									"value": "{{comId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Ошибка изменения нет такого коммента",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"",
									"pm.test(\"Error field is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.error).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Validate that the error field is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.error).to.exist.and.to.have.lengthOf.at.least(1, \"Error field should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Validate the error field is a string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.error).to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"The error message is descriptive and informative\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.error).to.exist.and.to.be.a('string').and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Response does not contain any additional fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(Object.keys(responseData)).to.have.lengthOf(1, \"Response should only contain 'error' field\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"абракадабра\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userIdAnother}}"
								},
								{
									"key": "eventId",
									"value": "{{eventId}}"
								},
								{
									"key": "commentId",
									"value": "999999999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Ошибка удаление коммента не автор",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Error message is not empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.error).to.exist.and.to.not.be.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Error message is a string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.error).to.be.a('string');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body structure is valid\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object').that.has.property('error');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userIdAnother}}"
								},
								{
									"key": "eventId",
									"value": "{{eventId}}"
								},
								{
									"key": "commentId",
									"value": "{{comIdTestPatch}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Ошибка удаление коммента нет такого коммента",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Error field is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
									"});\r",
									"\r",
									"\r",
									"// Test to check if the response has the correct content type\r",
									"pm.test(\"Response has the correct content type\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is an object\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has the required field 'error'\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('error');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body does not have any additional properties\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    const allowedProperties = ['error'];\r",
									"    const additionalProperties = Object.keys(responseData).filter(property => !allowedProperties.includes(property));\r",
									"\r",
									"    pm.expect(additionalProperties.length).to.equal(0, `Response body should not have additional properties: ${additionalProperties}`);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userIdAnother}}"
								},
								{
									"key": "eventId",
									"value": "99999999"
								},
								{
									"key": "commentId",
									"value": "{{comId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Ошибка удаление коммента нет такого пользователя",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required field - error\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.error).to.exist.and.to.be.a('string');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Error message is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is in an acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "9999999"
								},
								{
									"key": "eventId",
									"value": "{{eventId}}"
								},
								{
									"key": "commentId",
									"value": "{{comId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Ошибка удаление коммента нет такого события",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required field - error\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.error).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Error is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is in an acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}"
								},
								{
									"key": "eventId",
									"value": "9999999"
								},
								{
									"key": "commentId",
									"value": "{{comId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление коммента",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Comment is successfully deleted\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(204);\r",
									"    pm.expect(pm.response.text()).to.be.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is in an acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the response text is empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.be.empty;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userIdAnother}}"
								},
								{
									"key": "eventId",
									"value": "{{eventIdAnother}}"
								},
								{
									"key": "commentId",
									"value": "{{comIdAnother}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					" async addComment(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async addCompilation(compilation, verbose=null) {",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
					"    }",
					"",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"    ",
					"    async rejectEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
					"    }",
					"",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
					"    }",
					"",
					"    async findCategory(catId, verbose=null) {",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
					"    }",
					"",
					"    async findCompilation(compId, verbose=null) {",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
					"    }",
					"",
					"    async findEvent(eventId, verbose=null) {",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
					"    }",
					"",
					"    async findUser(userId, verbose=null) {",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"",
					"                    resolve(response.json());",
					"                });",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getCompilation(...eventIds) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            events: eventIds",
					"        };",
					"    }",
					"",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"",
					"    getWord(length = 1) {",
					"        let result = '';",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"        const charactersLength = characters.length;",
					"        let counter = 0;",
					"        while (counter < length) {",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
					"            counter += 1;",
					"        }",
					"        return result;",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "usersCount",
			"value": 1,
			"type": "number"
		},
		{
			"key": "request_body",
			"value": ""
		},
		{
			"key": "mail",
			"value": ""
		},
		{
			"key": "response",
			"value": ""
		},
		{
			"key": "compid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "toCheck",
			"value": ""
		},
		{
			"key": "newDataToSet",
			"value": ""
		},
		{
			"key": "uid1",
			"value": ""
		},
		{
			"key": "reqid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catId",
			"value": ""
		},
		{
			"key": "confirmedRequests",
			"value": ""
		},
		{
			"key": "responseArr",
			"value": ""
		},
		{
			"key": "source1",
			"value": ""
		},
		{
			"key": "source2",
			"value": ""
		},
		{
			"key": "fromId",
			"value": "0"
		},
		{
			"key": "source",
			"value": ""
		},
		{
			"key": "uid",
			"value": "1",
			"type": "string"
		},
		{
			"key": "eid",
			"value": "1",
			"type": "string"
		},
		{
			"key": "ctName",
			"value": ""
		},
		{
			"key": "ctId",
			"value": "1"
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "eventId",
			"value": ""
		},
		{
			"key": "comId",
			"value": ""
		},
		{
			"key": "userIdAnother",
			"value": ""
		},
		{
			"key": "userNameAnother",
			"value": ""
		},
		{
			"key": "comIdAnother",
			"value": ""
		},
		{
			"key": "eventIdAnother",
			"value": ""
		},
		{
			"key": "userName",
			"value": ""
		},
		{
			"key": "comIdTestPatch",
			"value": ""
		}
	]
}